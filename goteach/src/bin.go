// Code generated by go-bindata.
// sources:
// data/chat.html
// data/main.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataChatHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\xc1\x4e\xdc\x3a\x14\x5d\x27\x5f\x61\xcc\x5b\x04\xe9\x61\x8b\xc5\x93\x9e\x5a\x27\x52\x0b\x53\x75\x81\x0a\x12\x54\x55\x05\x48\x78\xe2\x9b\x89\x8b\x63\xa7\xf6\x4d\x02\x42\xf3\xef\x95\x9d\x0c\xcc\x82\xb2\xb9\x91\x7d\x75\xce\x3d\x3e\x3e\x8e\x38\x38\xbb\x38\xbd\xfe\x79\xb9\x22\x2d\x76\xa6\xca\x45\xfc\x10\x23\xed\xa6\xa4\x60\x69\xdc\x00\xa9\xaa\x3c\x13\x1d\xa0\x24\x75\x2b\x7d\x00\x2c\xe9\xf7\xeb\x2f\xc7\xff\xd3\xb8\x8f\x1a\x0d\x54\x5f\x57\xe7\xe7\x17\x07\x82\xcf\xab\x3c\x13\xa1\xf6\xba\x47\x82\x4f\x3d\x94\x14\xe1\x11\xf9\x2f\x39\xca\x79\x37\xe2\xb2\x66\xb0\x35\x6a\x67\xc9\xe4\xfc\x43\x71\x44\x9e\xf3\x3c\xcb\x32\x03\x48\xa6\x40\x4a\x62\x61\x22\x3f\x60\x7d\xe5\xea\x07\xc0\xe2\x7e\x0a\x1f\x6e\xf9\x2d\xff\xe7\x79\xd2\x56\xb9\x89\x19\x57\xcb\x88\x66\xad\x0b\xb8\xbd\xe5\x53\xb8\x3f\xfa\xb8\x23\x68\x9c\xef\x48\x49\x94\xab\x87\x0e\x2c\xb2\xdf\x03\xf8\xa7\x2b\x30\x50\xa3\xf3\x05\x8d\xed\xc3\x3a\x56\xfa\x8a\xd1\xb6\x1f\xf0\x1d\x50\xea\xdf\x58\xd9\x41\x19\x4f\x93\x96\x08\xfe\x6e\x8f\x42\xe9\xf1\x1d\x02\xa5\xc7\xc3\xba\x95\x18\x01\x11\xc1\x39\x99\x02\x73\xd6\xf5\x60\x49\x49\x76\x76\x14\x10\xad\x98\xfb\xd9\x14\x58\x00\xab\x0a\x7a\x71\xb9\xfa\xb6\x3a\x5b\x66\x71\x4e\xb6\x89\x22\xe1\x3b\x08\x41\x6e\xe0\x2d\x8a\xa4\xaa\xdf\xd7\x54\x7b\x90\x08\x2b\x03\x71\x55\xd0\x7e\x61\xcc\x7a\xa6\xad\x05\x7f\x0d\x8f\xd1\x03\x60\x4a\xa2\x9c\x3b\x4a\x8f\x4c\xdb\x00\x1e\x3f\x43\xe3\x3c\x14\xfd\xbf\xf1\xa0\xac\xd1\x3e\xe0\x69\xab\x8d\x5a\xce\x93\x86\x75\x61\x13\xfe\xea\xc1\x27\x63\x5e\x6d\x20\x2f\xb3\x75\x53\x44\x18\x33\x60\x37\xd8\x92\x8a\x9c\xfc\xb7\xd3\x9f\xc5\xc6\xcd\x5e\xf7\xf8\xe4\x8e\x79\xe8\xdc\x08\xc5\x82\xde\xe6\xa9\xc4\x9a\xee\x84\x35\xae\x1e\x42\xb1\x88\x8a\x97\xcc\x9c\x0d\xc3\xba\xd3\xf8\xa6\x45\xc0\x7a\x0f\x23\x58\x3c\x83\x46\x0e\x06\x77\xc8\x17\xef\x67\xd6\x51\x9a\x01\x96\x91\x89\xd4\x43\x00\x5c\x44\xa4\xf1\xdb\x3c\x13\x7c\xce\x77\x95\x0b\x3e\x3f\x1b\xb1\x76\xea\x89\x38\x6b\x9c\x54\x25\x9d\x93\x9e\x5e\x8d\x24\xad\x87\xa6\xa4\xdc\xb8\x8d\x1b\x90\x56\xe7\xe9\x2b\xb8\xac\xc4\xda\x13\xbe\xd4\x3c\xcf\x44\x4a\xb3\x56\x25\x9d\x23\x5b\x89\x39\xaa\xaf\x2f\x8b\x92\x14\x4b\xba\x9f\x4b\x4a\xe4\x80\xae\x76\x5d\x6f\x00\xa1\xa4\xae\x69\x68\x25\x78\x64\x88\xe3\x63\x54\x13\x65\x0c\x64\x25\xb8\xd2\x63\x14\x1d\xd5\x26\xf1\xf1\x5f\xf0\x27\x00\x00\xff\xff\xcb\x59\x62\x24\x1b\x04\x00\x00")

func dataChatHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataChatHtml,
		"data/chat.html",
	)
}

func dataChatHtml() (*asset, error) {
	bytes, err := dataChatHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/chat.html", size: 1051, mode: os.FileMode(420), modTime: time.Unix(1478033495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x4f\x4b\x03\x31\x10\xc5\xcf\xdd\x4f\x31\x9d\xb3\x9a\xab\xe8\x24\x17\xad\xf4\x50\x68\xc1\x7a\xf0\x98\x6d\xa6\xdd\x85\xfc\x59\x92\x59\xea\x52\xfa\xdd\x25\x5d\xf4\x22\x9e\x92\xf7\xf8\x0d\xbc\xf7\x68\xf9\xba\x7d\xd9\x7f\xee\x56\xd0\x49\xf0\xa6\xa1\xfa\x80\xb7\xf1\xa4\x91\x23\x56\x83\xad\x33\xcd\x82\x02\x8b\x85\x43\x67\x73\x61\xd1\xf8\xb1\x7f\xbb\x7f\xc4\xea\x4b\x2f\x9e\xcd\x7a\xb5\xd9\x6c\x97\xa4\x66\xd5\x90\x9a\xcf\xa8\x4d\x6e\xaa\x54\x6b\xd6\xec\x7d\xba\x83\x73\xca\xde\x2d\x49\xb5\xd5\x2d\x83\x8d\x50\x64\xf2\xac\xf1\x90\x7c\xca\x4f\x90\xd9\x3d\xa3\xb9\x5c\xe0\xe1\x08\xd7\x2b\xa9\x8a\x98\xa6\x59\xd0\x31\xe5\x00\xf6\x20\x7d\x8a\x1a\x95\x4f\xa7\x3e\x22\x04\x96\x2e\x39\x8d\xbb\xed\xfb\xbe\xa6\x59\x50\x1f\x87\x51\x40\xa6\x81\x35\x0a\x7f\x09\x42\xb4\x81\x35\x8e\x85\x73\xfd\xa1\xa1\x36\x83\xfa\xc3\x0e\xb6\x94\x73\xca\xee\x87\xff\xd5\xff\xf0\x65\x6c\x43\x2f\xb7\x05\x54\x8d\x56\x3b\xcf\x65\x49\xdd\xa6\xfc\x0e\x00\x00\xff\xff\xf1\xd4\x24\x53\x5a\x01\x00\x00")

func dataMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataMainHtml,
		"data/main.html",
	)
}

func dataMainHtml() (*asset, error) {
	bytes, err := dataMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/main.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1478005678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/chat.html": dataChatHtml,
	"data/main.html": dataMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"chat.html": &bintree{dataChatHtml, map[string]*bintree{}},
		"main.html": &bintree{dataMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

